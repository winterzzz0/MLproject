name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      -"README.md"

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout COde
        uses: actions/checkout@v3 #clone my repo into the github VM

      - name: Lint code
        run: echo "Linting repostry"

      - name: Run unit tests
        run: echo "Running unit tests"
  
  build-and-push-erc-image:
    name: Continuous Delivery
    needs: integration # waits for the integration job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Utilities
        uses: aws-actions/configure-aws-credentials@v1
        with: #Passes inputs/parameters to an action (passes directly to the action)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} #fixed parameter name - injects the decrypted secret into the VM
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCOUNT_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 #Uses AWSâ€™s pre-built action to authenticate Docker CLI to ECR ( logs Docker CLI into AWS ECR)
      
      - name: Build,tag, and push image to amazon ECR
        id: build-image
        env: #Sets environment variables for the job e.g., ECR_REGISTRY, ECR_REPOSITORY, IMAGE_TAG
          docker build -t $ECR_REGISTRY/&ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "pushed!"
  
  Continuous-Deployment:
    needs: build-and-push-erc-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Utilities
        uses: aws-actions/configure-aws-credentials@v1
        with: #Passes inputs/parameters to an action (passes directly to the action)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} #fixed parameter name - injects the decrypted secret into the VM
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCOUNT_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Pull latest image
        run: |
         docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        #When you pull from ECR , you're pulling the Docker image itself stored in ECR
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
      
      

